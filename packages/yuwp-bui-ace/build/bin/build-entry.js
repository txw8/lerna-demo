var Components = require('../../components.json');
var fs = require('fs');
var render = require('json-templater/string');
var uppercamelcase = require('uppercamelcase');
var path = require('path');
var endOfLine = require('os').EOL;

var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';';
var INSTALL_COMPONENT_TEMPLATE = '{{name}}';
var MAIN_TEMPLATE = `/** YuwpUI {{version}} Copyright © 2017-present Yusys All Rights Reserved. */
/* Automatically generated by './build/bin/build-entry.js' */

{{include}}
import locale from '@/src/locale';
import CollapseTransition from '@/src/transitions/collapse-transition';

const components = [
  {{install}},
  CollapseTransition
];

window.$YUWPUI_CONF = window.$YUWPUI_CONF || {};
const install = function(Vue, opts = window.$YUWPUI_CONF) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);

  /*
    组件属性全局配置功能， use时配置{pagination: {small: true, currentPage: 2, total: 10000, pageSize: 100}}格式的参数。
    优先级：组件标签配置的属性 > 全局配置的属性 > 组件默认属性值
  */
  components.forEach(component => {
    var comName = component.xtype.toLowerCase();
    var attrs = component.props;
    Object.keys(opts).forEach(function(name) {
      if (comName.slice(2) === name) {
        Object.keys(opts[name]).forEach(function(attr) {
          if (opts[name][attr] !== undefined && attrs[attr] !== undefined) {
            if (typeof (attrs[attr]) === 'function') {
              attrs[attr] = {default: opts[name][attr]};
            } else {
              attrs[attr].default = opts[name][attr];
            }
          }
        });
      }
    });
    Vue.component(component.name, component);
    Vue.component(component.xtype, component);
  });

  Vue.prototype.$YUFPWP = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}
console.log('YuwpUI {{version}}.{{buildtime}}');
export default {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
{{list}}
};
`;

delete Components.font;

var ComponentNames = Object.keys(Components);

var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach(name => {
  var componentName = uppercamelcase(name);

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  if (['Loading', 'MessageBox', 'Notification', 'Message', 'Norepeat'].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name
    }));
  }

  if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  buildtime: (new Date()).toLocaleDateString(),
  list: listTemplate.join(',' + endOfLine)
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);

